#!/usr/bin/env bash

## Configuration

#Changer KEY_DIR pour le chemin vers lequel la clef USB sera montee
#KEY_DIR=/media/usb0/hack
KEY_DIR=/mnt/k/Fallout/Fallout3Terminal/usbkey

#Nom du user qui sera loggue quand le hack est correct
hackeruser=fallout_hack

## Fin de configuration

BASE_DIR="$(cd "$(dirname "$0")"; pwd)" || exit 2

HACK_FILE=$KEY_DIR/hack

IFS=$'\n'
entrylist=('Go Back')
rawentry="$(find $BASE_DIR/entries -type f)"
for i in $rawentry; do
i=${i##*/}
entrylist+=("$i")
done

banniere_courante=""

COLUMNS=12

showclk ()
{
    while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &
}

showbanniere()
{
    while sleep 1
    do
        content=`cat $BASE_DIR/banniere.txt`
        if [[ $banniere_courante != $content ]]
        then
            banniere_courante=$content
            tput sc;
            tput cup 4 0
            #display_center "$BASE_DIR/banniere.txt" | pv -qL 80
            echo $content
            tput rc
        fi
    done&
}


showmessage ()
{
    
    while sleep 1; do 
        echo "test"
        hack_plugged=1
        echo $((nb-1)) > $HACK_FILE
        tput sc
        tput cup 0 $(($(tput cols)-29))
        echo "HACK"
        tput rc
    done &
}


testkeyhack ()
{
     hack_plugged=0
     retcode=1
#    while sleep 1; do 
        if [ -e $HACK_FILE ]; then 
          nb=`cat $HACK_FILE`
          if ((nb > 0)); then
            if ((hack_plugged == 0)); then
                  hack_plugged=1
                  echo $((nb-1)) > $HACK_FILE
                  (cd Fallout_Terminal_Game/venv/; python3 hack_cmd.py)
                  retcode=$?
                  tput sc
                  tput cup 0 $(($(tput cols)-29))
                  echo $retcode
                  tput rc
                  read
            fi
          fi
        fi
        return $retcode
#        done &
}

#This function is to display the top header in a centred alignment!
display_center(){
    columns="$(tput cols)"
    while IFS= read -r line; do
        printf "%*s\n" $(( (${#line} + columns) / 2)) "$line"
    done < "$1"
}


#This string is to be displayed as a custom "title header" at the top, feel free to customise it, as most Terminals in Fallout have their own custom one based on their owner!
greeter=$'
Personal Terminal "Proto-Boy" Manufactured by RobCo
___________________________________________________'

displaygreeter ()
{
#display the Menu text
play -q $BASE_DIR/ui_hacking_charscroll.wav
display_center "$BASE_DIR/greeterheader.txt" | pv -qL 80
echo "$greeter" | pv -qL 80
play -q $BASE_DIR/ui_hacking_charscroll.wav

}

mainmenupass ()
{

while true
do
    clear
    displaygreeter

    showbanniere
    #showclk
    testkeyhack
    retcodekeyhack=$?
    #echo $retcodekeyhack
    if ((retcodekeyhack == 0)); then
        utilisateur=hacker
        printf "Bonjour, hacker\n"
        read
        displaymainmenu
    else
    
        echo -n "Utilisateur : " | pv -qL 80
        read utilisateur
        echo -n "Mot de passe : " | pv -qL 80
        read -s password
        printf "\n"
        getent passwd $utilisateur > /dev/null
        if [ $? -eq 0 ]; then
            origpass=`grep -w "$utilisateur" /etc/shadow | cut -d: -f2`
            algo=`echo $origpass | cut -d'$' -f2`
            salt=`echo $origpass | cut -d'$' -f3`
            
            export password
            export algo
            export salt

            genpass=$(perl -le 'print crypt("$ENV{password}","\$$ENV{algo}\$$ENV{salt}\$")')
            if [ "$genpass" == "$origpass" ]
            then
                echo 'Correct password.'
                printf "Bonjour, $utilisateur\n"
                read
                displaymainmenu
            else 
                echo 'Wrong password.'
                read
            fi    
        else
            printf "L'utilisateur n'existe pas"
            read
        fi
        
    fi
done

}


displaymainmenu()
{
#Display the menu options
COLUMNS=12

while [ true ]; do
    showbanniere
    if [ -e $KEY_DIR ]; then
        select menuchoice in "View Journal Entries for your group" "View Journal Entries on key" "Log a Journal Entry" "Copy a Journal Entry on key" "Delete a Journal Entry" "Logout"
        do
            case $menuchoice in
            "View Journal Entries for your group")
            play -q $BASE_DIR/ui_hacking_charenter_01.wav
            viewentriesfunc
            break;;
            "View Journal Entries on key")
            play -q $BASE_DIR/ui_hacking_charenter_01.wav
            viewentriesonkeyfunc
            break;;
            "Log a Journal Entry")
            play -q $BASE_DIR/ui_hacking_charenter_01.wav
            writeentryfunc
            break;;
            "Copy a Journal Entry on key")
            play -q $BASE_DIR/ui_hacking_charenter_01.wav
            copyentryonkeyfunc
            break;;
            "Delete a Journal Entry")
            play -q $BASE_DIR/ui_hacking_charenter_01.wav
            deleteentryfunc
            break;;
            "Logout")
            play -q $BASE_DIR/ui_hacking_charenter_01.wav
            echo Goodbye! && return 9
            break;;
            *)
            play -q $BASE_DIR/ui_hacking_passbad.wav
            break;;
            esac
        done
    else
        select menuchoice in "View Journal Entries for your group" "Log a Journal Entry" "Delete a Journal Entry" "Logout"
        do
            case $menuchoice in
            "View Journal Entries for your group")
            play -q $BASE_DIR/ui_hacking_charenter_01.wav
            viewentriesfunc
            break;;
            "Log a Journal Entry")
            play -q $BASE_DIR/ui_hacking_charenter_01.wav
            writeentryfunc
            break;;
            "Delete a Journal Entry")
            play -q $BASE_DIR/ui_hacking_charenter_01.wav
            deleteentryfunc
            break;;
            "Logout")
            play -q $BASE_DIR/ui_hacking_charenter_01.wav
            echo Goodbye! && return 9
            break;;
            *)
            play -q $BASE_DIR/ui_hacking_passbad.wav
            break;;
            esac
        done
    fi
done
}


#Main Menu Screen
mainmenufunc () 
{
clear

#display the Menu text
displaygreeter
echo What would you like to do? | pv -qL 80

displaymainmenu

}

getentries ()
{
#find entries for user
userdirs=''

#adding all the text files as individual strings to be used as a selection menu
entrynames=('Go Back')
entrydirs=('')
entryusers=('')

##debug
#hackeruser="blue1"
##

usersblue=`members blue` 
usersred=`members red` 

if [ $utilisateur = $hackeruser ]
then
users=$usersblue
users+=" "
users+=$usersred
#IFS=' ' read -a usersarr <<< $users
else
    #usersarr=($utilisateur)
    #on voit tous les fichiers de son groupe
    if [[ "$usersblue" == *"$utilisateur"* ]]; then
        users+=$usersblue
    elif [[ "$usersred" == *"$utilisateur"* ]]; then
        users+=$usersred
    fi
fi
IFS=' ' read -a usersarr <<< $users

for user in ${usersarr[@]}
do
  userdir=`getent passwd $user | cut -d":" -f6`
  #This line needs bash 4.4-alpha or better
  readarray -d '' -O "${#entrydirs[@]}" entrydirs < <(find $userdir/fallout_entries/entries -type f -print0)
done

for i in ${entrydirs[@]}
do
    usrdir=`echo $i | cut -f 3 -d /`
    i=${i##*/}
    #if [ $utilisateur = $hackeruser ]
    #then
        entrynames+=("$i ($usrdir)")
    #else
    #    entrynames+=("$i")
    #fi
#    echo -e $i
done
#read
}

displayentries()
{
    #display the Menu text
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter" 
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo Which $utilisateur Journal Entry would you like to access? | pv -qL 80
    
    #display the menu options
    COLUMNS=12
    select readoption in ${entrynames[@]}
    do
    case $readoption in
    "Go Back")
    play -q $BASE_DIR/ui_hacking_charenter_01.wav
    #repeatmainmenufunc
    return
    ;;
        *)
    play -q $BASE_DIR/ui_hacking_charenter_01.wav
    ;;
    esac

    #displays the selected entry
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter"
    echo
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo "$readoption:"  | pv -qL 80
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    #cat< "$BASE_DIR/entries/$readoption"  | pv -qL 80
    
    ##dbg
    #for edd in ${entrydirs[@]}
    #do
    #    echo $edd
    #done
    #for edd in ${!entrydirs[@]}
    #do
    #    echo $edd
    #done
    #for edd in ${entrynames[@]}
    #do
    #    echo $edd
    #done
    #
    #echo "red option : " $readoption
    #read
    ##

    for i in ${!entrynames[@]}
    do
        if [[ "${entrynames[$i]}" = $readoption ]]
        then
            cat< "${entrydirs[$i]}"  | pv -qL 80
        fi
    done
    echo
    read -p "Press enter to continue"
    play -q $BASE_DIR/ui_hacking_charenter_01.wav
    
    #goes back to main menu
    #repeatmainmenufunc
    return 
    done
}

#Option 1 Menu, Viewing Journal Entries
viewentriesfunc () 
{
    getentries
    displayentries
}


viewentriesonkeyfunc ()
{
    entrynames=('Go Back')
    entrydirs=('')
    entryusers=('')

    search_dir=$KEY_DIR/userfiles
    for entry in "$search_dir"/*
    do
        filename=${entry##*/}
        entrydirs+=("$entry")
        entrynames+=("$filename (key)")
    done
    displayentries
    return
}

copyentryonkeyfunc ()
{
    getentries
    selectcopyentry
    return
}

selectcopyentry ()
{
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter" 
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo Which $utilisateur Journal Entry would you like to copy? | pv -qL 80
    
    #display the menu options
    COLUMNS=12
    select readoption in ${entrynames[@]}
    do
    case $readoption in
    "Go Back")
    play -q $BASE_DIR/ui_hacking_charenter_01.wav
    #repeatmainmenufunc
    return
    ;;
        *)
    play -q $BASE_DIR/ui_hacking_charenter_01.wav
    ;;
    esac

    #displays the selected entry
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter"
    echo
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo "$readoption:"  | pv -qL 80
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    
    for i in ${!entrynames[@]}
    do
        if [[ "${entrynames[$i]}" = $readoption ]]
        then
            cp "${entrydirs[$i]}" $KEY_DIR/userfiles
        fi
    done
    echo "Copied."
    read -p "Press enter to continue"
    play -q $BASE_DIR/ui_hacking_charenter_01.wav
    
    #goes back to main menu
    #repeatmainmenufunc
    return 
    done
}

#menu for writing an entry
writeentryfunc () 
{

userdir=`getent passwd $utilisateur | cut -d":" -f6`
userdir+="/fallout_entries/entries/"


#displays menu text
clear
displaygreeter
echo "What would you like to name the entry?" | pv -qL 80

#reads user input
read entrynameinput 
play -q $BASE_DIR/ui_hacking_charenter_01.wav

#displays menu text again
clear
display_center "$BASE_DIR/greeterheader.txt"
echo "$greeter" 
play -q $BASE_DIR/ui_hacking_charscroll.wav
echo Press CTRL+D to finalise entry  | pv -qL 80
play -q $BASE_DIR/ui_hacking_charscroll.wav
echo $entrynameinput:  | pv -qL 80
echo
#uses cat text editor to write entries. ctrl+d to finish
cat >"$userdir/$entrynameinput"
echo "Signature : $utilisateur" > "$userdir/$entrynameinput"
cat "$userdir/$entrynameinput"
echo "Press any key to go back"
read
clear
play -q $BASE_DIR/ui_hacking_charenter_01.wav

#returns to mainmenu
#repeatmainmenufunc
return


}

deleteentryfunc()
{
    #On ne peut supprimer que ses propres fichiers
    if [ $utilisateur = $hackeruser ]  #normalement, ca ne doit pas arriver
    then
        return
    fi
    entrylist=('Go Back')

    userdir=`getent passwd $utilisateur | cut -d":" -f6`

    rawentry="$(find $userdir/fallout_entries/entries -type f)"
    for i in $rawentry; do
    i=${i##*/}
    entrylist+=("$i")
    done

    #displays menu text
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter" 
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo Which Journal Entry would you like to delete? | pv -qL 80
    
    #displays menu options
    COLUMNS=12
    select readoption in ${entrylist[@]}
    do
    case $readoption in
    "Go Back")
    play -q $BASE_DIR/ui_hacking_charenter_01.wav
    #repeatmainmenufunc
    return
    ;;
        *)
    play -q $BASE_DIR/ui_hacking_charenter_01.wav
    ;;
    esac
    
    #displays menu text again
    clear
    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter"
    echo
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo "Delete $readoption? Type YES to continue"  | pv -qL 80
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    
    #detects user input if they typed in "yes". case insensitive as it converts it to all caps
    read confirmdeletion
     if  [[ ${confirmdeletion^^} == "YES" ]]
     then
        rm -f "$BASE_DIR/entries/$readoption"
        play -q $BASE_DIR/ui_hacking_charenter_01.wav
        echo FILE DELETED!
        play -q  $BASE_DIR/ui_hacking_passgood.wav
        sleep 0.1
        #repeatmainmenufunc
        return
                
            #if something other than yes was typed in
    else
        echo OPERATION CANCELLED
        play -q $BASE_DIR/ui_hacking_charenter_01.wav
        play -q  $BASE_DIR/ui_hacking_passbad.wav
        sleep 0.2
        
        #goes back to main menu
        #repeatmainmenufunc
        return
    fi
    done
}

#same as main menu screen function, but without the annoying animations
repeatmainmenufunc ()
{

while true
do
    clear

    display_center "$BASE_DIR/greeterheader.txt"
    echo "$greeter" 
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo What would you like to do? | pv -qL 80

    ret=displaymainmenu
    if [ ret == 9 ]
    then
        return 9
    fi
done
}

startupscreen ()
{
    #some random aesthetic startup junk

    clear
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo Initializing boot... | pv -qL 80
    sleep 0.4
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo Loading RobCo Unified OS...  | pv -qL 80
    sleep 0.4
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo 64K RAM detected...  | pv -qL 80
    sleep 0.4
    play -q $BASE_DIR/ui_hacking_charscroll.wav
    echo Launching Interface...  | pv -qL 80
    sleep 0.4
    clear
    echo $'


      _____       _      _____                   
     |  __ \     | |    / ____|                  
     | |__) |___ | |__ | |     ___               
     |  _  // _ \| \'_ \| |    / _ \              
     | | \ \ (_) | |_) | |___| (_) |             
     |_|__\_\___/|_.__/ \_____\___/  _           

    '

    echo "==============================================" | pv -qL 50
    play -q $BASE_DIR/ui_hacking_passgood.wav
    sleep 1

}

#startupscreen;

#goes to the main menu
mainmenupass;
